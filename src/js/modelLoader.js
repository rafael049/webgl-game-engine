// Generated by LiveScript 1.6.0
(function(){
  window.loadOBJfile = function(path){
    var result, xmlhttp;
    result = void 8;
    xmlhttp = new XMLHttpRequest;
    xmlhttp.async = false;
    xmlhttp.open("GET", path, false);
    xmlhttp.send();
    if (xmlhttp.status === 200) {
      result = xmlhttp.responseText;
    } else {
      console.log("Failed to get model, xml status: " + xmlhttp.status);
    }
    return result;
  };
  window.loadMesh = function(name){
    var data, _vertex, _texCoord, _normal, vertexIndex, texIndex, normalIndex, str, i$, len$, line, elements, prefix, j$, i, indexes;
    data = {};
    data.vertex = [];
    _vertex = [];
    data.texCoord = [];
    _texCoord = [];
    data.normal = [];
    _normal = [];
    vertexIndex = [];
    texIndex = [];
    normalIndex = [];
    data.numVertices = 0;
    str = loadOBJfile("assets/models/" + name + ".obj");
    str = str.split('\n');
    for (i$ = 0, len$ = str.length; i$ < len$; ++i$) {
      line = str[i$];
      elements = line.split(" ");
      prefix = elements[0];
      if (prefix === "v") {
        _vertex = _vertex.concat([parseFloat(elements[1]), parseFloat(elements[2]), parseFloat(elements[3])]);
      }
      if (prefix === "vt") {
        _texCoord = _texCoord.concat([parseFloat(elements[1]), 1 - parseFloat(elements[2])]);
      }
      if (prefix === "f") {
        for (j$ = 1; j$ <= 3; ++j$) {
          i = j$;
          indexes = elements[i].split('/');
          vertexIndex = vertexIndex.concat(parseInt(indexes[0]) - 1);
          texIndex = texIndex.concat(parseInt(indexes[1]) - 1);
          normalIndex = normalIndex.concat(parseInt(indexes[2]) - 1);
        }
        data.numVertices += 1;
      }
    }
    for (i$ = 0, len$ = vertexIndex.length; i$ < len$; ++i$) {
      i = vertexIndex[i$];
      data.vertex = data.vertex.concat(_vertex[3 * i], _vertex[3 * i + 1], _vertex[3 * i + 2]);
    }
    for (i$ = 0, len$ = texIndex.length; i$ < len$; ++i$) {
      i = texIndex[i$];
      data.texCoord = data.texCoord.concat(_texCoord[2 * i], _texCoord[2 * i + 1]);
    }
    data.numVertices = vertexIndex.length;
    return data;
  };
}).call(this);
