// Generated by LiveScript 1.6.0
(function(){
  var Player;
  window.Player = Player = (function(){
    Player.displayName = 'Player';
    var MAX_VEL, prototype = Player.prototype, constructor = Player;
    MAX_VEL = 0.2;
    function Player(gl, pos){
      this.pos = pos;
      this.vel = [0.0, 0.0, 0.0];
      this.dir = [0.0, 0.0, 0.0];
      this.radius = 1.0;
      this.height = 2.0;
      this.collidingWith = [];
      this.camera = new Camera(gl, [0.0, 0.0, 0.0], this);
      this.state = "Normal";
      this.timers = [];
      this.health = 100;
      this.dead = false;
    }
    Player.prototype.update = function(deltaTime){
      switch (this.state) {
      case "Normal":
        this.camera.update();
        this.updatePosition();
        this.readInput();
        this.calcVel(deltaTime);
        if (this.takingDamage) {
          if (HUD.damageScreen.style.opacity > 0.05) {
            HUD.damageScreen.style.opacity -= 0.05;
          } else {
            HUD.damageScreen.style.opacity = 0.0;
          }
        }
        break;
      case "Dying":
        this.dead = true;
        this.camera.deadView();
        if (this.wait("risada_delay", 2000)) {
          console.log("playAudio");
          AudioManager.playSound("peludao.opus");
          this.state = "Die";
        }
        break;
      case "Die":
        this.health = 0;
      }
      return this.sendMessages();
    };
    Player.prototype.updatePosition = function(){
      vec3.add(this.pos, this.pos, this.vel);
    };
    Player.prototype.calcVel = function(deltaTime){
      var front, right;
      front = vec3.clone(Message.get("cameraFrontVec"));
      right = vec3.clone(Message.get("cameraRightVec"));
      front[1] = 0.0;
      vec3.normalize(front, front);
      vec3.scale(right, right, this.dir[0] * MAX_VEL * deltaTime);
      vec3.scale(front, front, this.dir[2] * MAX_VEL * deltaTime);
      vec3.add(this.vel, front, right);
    };
    Player.prototype.readInput = function(){
      this.dir = [0.0, 0.0, 0.0];
      if (Input.keys[87]) {
        this.dir[2] += 1;
      }
      if (Input.keys[83]) {
        this.dir[2] += -1;
      }
      if (Input.keys[68]) {
        this.dir[0] += 1;
      }
      if (Input.keys[65]) {
        this.dir[0] += -1;
      }
      vec3.normalize(this.dir, this.dir);
    };
    Player.prototype.damage = function(value){
      if (this.health <= 0 && !this.dead) {
        return this.state = "Dying";
      } else {
        this.health -= value;
        HUD.damageScreen.style.opacity = 0.25;
        return this.takingDamage = true;
      }
    };
    Player.prototype.sendMessages = function(){
      Message.send("playerPosition", this.pos);
      Message.send("playerRef", this);
      return Message.send("isPlayerDead", this.dead);
    };
    Player.prototype.wait = function(name, time, once){
      var now, end;
      once == null && (once = false);
      now = Date.now();
      end = now + time;
      if (this.timers[name]) {
        if (now > this.timers[name]) {
          delete this.timers[name];
          return true;
        } else {
          return false;
        }
      } else {
        this.timers[name] = end;
        return false;
      }
    };
    return Player;
  }());
}).call(this);
