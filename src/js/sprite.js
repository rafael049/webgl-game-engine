// Generated by LiveScript 1.6.0
(function(){
  var Sprite;
  window.Sprite = Sprite = (function(superclass){
    var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
    function Sprite(gl, pos){
      Sprite.superclass.call(this, gl);
      this.name = "xaropinho";
      this.pos = pos;
      this.anim = {
        xTiles: 1,
        yTiles: 1,
        curFrame: 0,
        curAnim: "Idle",
        anims: {
          Idle: [0, 0]
        },
        loopAnim: true,
        ended: false
      };
      this.shader = Resources.getShader(gl, "sprite");
      this.mesh = Resources.getMesh(gl, "sprite1");
    }
    Sprite.prototype.render = function(viewMatrix, projectionMatrix){
      this.shader.setUniformInt("x_tiles", this.anim.xTiles);
      this.shader.setUniformInt("y_tiles", this.anim.yTiles);
      this.setShaderAnimation();
      superclass.prototype.render.apply(this, arguments);
      return this.nextFrame();
    };
    Sprite.prototype.update = function(){};
    Sprite.prototype.setShaderAnimation = function(){
      this.shader.setUniformInt("frame", this.anim.curFrame);
    };
    Sprite.prototype.nextFrame = function(){
      var start, end;
      start = this.anim.anims[this.anim.curAnim][0];
      end = this.anim.anims[this.anim.curAnim][1];
      if (this.anim.curFrame === end) {
        this.anim.ended = true;
      }
      if (this.anim.ended && this.anim.loopAnim) {
        this.anim.curFrame = start;
        this.anim.ended = false;
      } else if (this.anim.ended) {
        this.anim.curFrame = end;
      } else {
        this.anim.curFrame += 1;
      }
    };
    Sprite.prototype.playAnim = function(name, _loop){
      var start, end;
      _loop == null && (_loop = true);
      this.anim.curAnim = name;
      start = this.anim.anims[name][0];
      end = this.anim.anims[name][1];
      this.anim.curFrame = start;
      this.anim.ended = false;
      return this.anim.loopAnim = _loop;
    };
    Sprite.prototype.lookAtCamera = function(){
      var camPos, pos, dist;
      camPos = vec3.clone(Message.get("cameraPosition"));
      pos = vec3.clone(this.pos);
      if (camPos) {
        camPos[1] = 0.0;
        camPos[2] *= -1;
        pos[2] *= -1;
        dist = vec3.create();
        dist = [camPos[0] - pos[0], 0.0, camPos[2] - pos[2]];
        vec3.normalize(dist, dist);
        if (dist[0] < 0.0) {
          this.rot[1] = Math.PI + Math.atan(dist[2] / dist[0]);
        } else {
          this.rot[1] = Math.atan(dist[2] / dist[0]);
        }
        this.rot[1] += Math.PI / 2;
      }
    };
    return Sprite;
  }(GameObject));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
