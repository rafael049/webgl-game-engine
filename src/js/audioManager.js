// Generated by LiveScript 1.6.0
(function(){
  var AudioManager, Buffer, Sound;
  window.AudioManager = AudioManager = (function(){
    AudioManager.displayName = 'AudioManager';
    var prototype = AudioManager.prototype, constructor = AudioManager;
    AudioManager.audioBuffers = null;
    AudioManager.ctx = null;
    function AudioManager(ctx){
      constructor.ctx = ctx;
      constructor.audioBuffers = new Buffer(ctx, "assets/audio/tiro.mp3");
    }
    AudioManager.playSound = function(name){
      var sound;
      console.log(constructor.audioBuffers);
      sound = new Sound(constructor.ctx, constructor.audioBuffers.buffers[name]);
      return sound.play();
    };
    return AudioManager;
  }());
  Buffer = (function(){
    Buffer.displayName = 'Buffer';
    var prototype = Buffer.prototype, constructor = Buffer;
    function Buffer(ctx, path){
      var i$, ref$, len$;
      this.ctx = ctx;
      this.paths = ["rapaiz.mp3", "tiro.mp3", "batSwing.mp3", "irra.mp3", "peludao.opus"];
      this.buffers = {};
      this.ready = false;
      for (i$ = 0, len$ = (ref$ = this.paths).length; i$ < len$; ++i$) {
        path = ref$[i$];
        this.loadSound(path);
      }
    }
    Buffer.prototype.loadSound = function(filename){
      var fullPath, request, thisBuffer;
      fullPath = "assets/audio/" + filename;
      request = new XMLHttpRequest();
      request.open('get', fullPath, true);
      request.responseType = 'arraybuffer';
      thisBuffer = this;
      request.onload = function(){
        console.log("loading");
        console.log(thisBuffer.ctx);
        thisBuffer.ctx.decodeAudioData(request.response, function(buffer){
          thisBuffer.buffers[filename] = buffer;
          return console.log("loaded");
        });
      };
      return request.send();
    };
    return Buffer;
  }());
  Sound = (function(){
    Sound.displayName = 'Sound';
    var prototype = Sound.prototype, constructor = Sound;
    function Sound(ctx, buffer){
      this.ctx = ctx;
      this.buffer = buffer;
    }
    Sound.prototype.init = function(){
      this.gainNode = this.ctx.createGain();
      this.gainNode.gain.value = 0.1;
      this.source = this.ctx.createBufferSource();
      this.source.buffer = this.buffer;
      this.source.connect(this.gainNode);
      return this.gainNode.connect(this.ctx.destination);
    };
    Sound.prototype.play = function(){
      this.init();
      return this.source.start(this.ctx.currentTime);
    };
    return Sound;
  }());
}).call(this);
