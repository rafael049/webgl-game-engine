// Generated by LiveScript 1.6.0
(function(){
  var Xaropinho;
  window.Xaropinho = Xaropinho = (function(superclass){
    var prototype = extend$((import$(Xaropinho, superclass).displayName = 'Xaropinho', Xaropinho), superclass).prototype, constructor = Xaropinho;
    function Xaropinho(gl, pos){
      Xaropinho.superclass.call(this, gl, pos);
      this.name = "xaropinho";
      this.texture = Resources.getTexture(gl, "xaropinho.png");
      this.canCollide = true;
      this.radius = 1.0;
      this.anim.xTiles = 2;
      this.anim.yTiles = 1;
      this.anim.anims["Idle"] = [0, 0];
      this.anim.anims["Hurt"] = [1, 1];
      this.anim.curAnim = "Idle";
    }
    Xaropinho.prototype.update = function(){
      var playerPos, dist, vel;
      superclass.prototype.update.call(this);
      switch (this.state) {
      case "Idle":
        this.playAnim("Idle");
        this.vel = [0, 0, 0];
        playerPos = Message.get("playerPosition");
        dist = [];
        vec3.sub(dist, playerPos, this.pos);
        if (vec3.len(dist) > 5.0) {
          return this.state = "Attack";
        }
        break;
      case "Hurt":
        console.log(this.health);
        this.vel = [0, 0, 0];
        this.playAnim("Hurt");
        if (this.wait("hurt_time", 100)) {
          if (this.health <= 0) {
            return this.state = "Dead";
          } else {
            return this.state = "Idle";
          }
        }
        break;
      case "Attack":
        playerPos = Message.get("playerPosition");
        vel = [];
        vec3.sub(vel, playerPos, this.pos);
        this.playAnim("Idle");
        vec3.normalize(vel, vel);
        vec3.scale(vel, vel, 0.1);
        return this.vel = vel;
      case "Dead":
        this.vel = [0, 0.0, 0];
        if (this.wait("garbage", 500)) {
          return this.trash = true;
        }
      }
    };
    return Xaropinho;
  }(Enemy));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
