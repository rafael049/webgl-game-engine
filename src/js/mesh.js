// Generated by LiveScript 1.6.0
(function(){
  var Mesh;
  window.Mesh = Mesh = (function(){
    Mesh.displayName = 'Mesh';
    var prototype = Mesh.prototype, constructor = Mesh;
    function Mesh(gl, name){
      var data;
      this.gl = gl;
      data = loadMesh(name);
      this.numVertices = data.numVertices;
      this.posBuffer = this.newPosBuffer(data);
      this.indexBuffer = this.newIndexBuffer(data);
      this.texCoordBuffer = this.newTexCoordBuffer(data);
    }
    Mesh.prototype.render = function(shader, texture){
      var vertexPosition, texCoord;
      vertexPosition = shader.getAttribLocation("aVertexPosition");
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer);
      this.gl.vertexAttribPointer(vertexPosition, 3, this.gl.FLOAT, false, 0, 0);
      this.gl.enableVertexAttribArray(vertexPosition);
      texCoord = shader.getAttribLocation("aTexCoord");
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);
      this.gl.vertexAttribPointer(texCoord, 2, this.gl.FLOAT, false, 0, 0);
      this.gl.enableVertexAttribArray(texCoord);
      shader.use();
      this.gl.drawArrays(this.gl.TRIANGLES, 0, this.numVertices);
    };
    Mesh.prototype.newPosBuffer = function(data){
      var vertices, posBuffer;
      vertices = data.vertex;
      posBuffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, posBuffer);
      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices), this.gl.STATIC_DRAW);
      return posBuffer;
    };
    Mesh.prototype.newIndexBuffer = function(data){
      var indices, indexBuffer;
      indices = data.vertexIndex;
      indexBuffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);
      return indexBuffer;
    };
    Mesh.prototype.newTexCoordBuffer = function(data){
      var textureCoordinates, texCoordBuffer;
      textureCoordinates = data.texCoord;
      texCoordBuffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, texCoordBuffer);
      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), this.gl.STATIC_DRAW);
      return texCoordBuffer;
    };
    return Mesh;
  }());
}).call(this);
